/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LeapPlay.Api.Client.SwaggerDateConverter;

namespace LeapPlay.Api.Model
{
    /// <summary>
    /// RequestStationSettings
    /// </summary>
    [DataContract]
    public partial class RequestStationSettings :  IEquatable<RequestStationSettings>
    {
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum Undefined for value: Undefined
            /// </summary>
            [EnumMember(Value = "Undefined")]
            Undefined = 1,
            
            /// <summary>
            /// Enum Local for value: Local
            /// </summary>
            [EnumMember(Value = "Local")]
            Local = 2,
            
            /// <summary>
            /// Enum Remote for value: Remote
            /// </summary>
            [EnumMember(Value = "Remote")]
            Remote = 3,
            
            /// <summary>
            /// Enum RemoteWithQrCode for value: RemoteWithQrCode
            /// </summary>
            [EnumMember(Value = "RemoteWithQrCode")]
            RemoteWithQrCode = 4
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestStationSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestStationSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestStationSettings" /> class.
        /// </summary>
        /// <param name="displayName">displayName (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="qrCode">qrCode.</param>
        public RequestStationSettings(string displayName = default(string), ModeEnum mode = default(ModeEnum), string qrCode = default(string))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for RequestStationSettings and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }
            // to ensure "mode" is required (not null)
            if (mode == null)
            {
                throw new InvalidDataException("mode is a required property for RequestStationSettings and cannot be null");
            }
            else
            {
                this.Mode = mode;
            }
            this.QrCode = qrCode;
        }
        
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }


        /// <summary>
        /// Gets or Sets QrCode
        /// </summary>
        [DataMember(Name="qrCode", EmitDefaultValue=false)]
        public string QrCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestStationSettings {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  QrCode: ").Append(QrCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestStationSettings);
        }

        /// <summary>
        /// Returns true if RequestStationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestStationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestStationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.QrCode == input.QrCode ||
                    (this.QrCode != null &&
                    this.QrCode.Equals(input.QrCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.QrCode != null)
                    hashCode = hashCode * 59 + this.QrCode.GetHashCode();
                return hashCode;
            }
        }
    }

}
