/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LeapPlay.Api.Client.SwaggerDateConverter;

namespace LeapPlay.Api.Model
{
    /// <summary>
    /// RequestResetPassword
    /// </summary>
    [DataContract]
    public partial class RequestResetPassword :  IEquatable<RequestResetPassword>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestResetPassword" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestResetPassword() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestResetPassword" /> class.
        /// </summary>
        /// <param name="username">username (required).</param>
        /// <param name="passwordResetToken">passwordResetToken (required).</param>
        /// <param name="newPassword">newPassword (required).</param>
        public RequestResetPassword(string username = default(string), string passwordResetToken = default(string), string newPassword = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for RequestResetPassword and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "passwordResetToken" is required (not null)
            if (passwordResetToken == null)
            {
                throw new InvalidDataException("passwordResetToken is a required property for RequestResetPassword and cannot be null");
            }
            else
            {
                this.PasswordResetToken = passwordResetToken;
            }
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new InvalidDataException("newPassword is a required property for RequestResetPassword and cannot be null");
            }
            else
            {
                this.NewPassword = newPassword;
            }
        }
        
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets PasswordResetToken
        /// </summary>
        [DataMember(Name="passwordResetToken", EmitDefaultValue=false)]
        public string PasswordResetToken { get; set; }

        /// <summary>
        /// Gets or Sets NewPassword
        /// </summary>
        [DataMember(Name="newPassword", EmitDefaultValue=false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestResetPassword {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  PasswordResetToken: ").Append(PasswordResetToken).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestResetPassword);
        }

        /// <summary>
        /// Returns true if RequestResetPassword instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestResetPassword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestResetPassword input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.PasswordResetToken == input.PasswordResetToken ||
                    (this.PasswordResetToken != null &&
                    this.PasswordResetToken.Equals(input.PasswordResetToken))
                ) && 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.PasswordResetToken != null)
                    hashCode = hashCode * 59 + this.PasswordResetToken.GetHashCode();
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                return hashCode;
            }
        }
    }

}
