/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LeapPlay.Api.Client.SwaggerDateConverter;

namespace LeapPlay.Api.Model
{
    /// <summary>
    /// ChangeRequest
    /// </summary>
    [DataContract]
    public partial class ChangeRequest :  IEquatable<ChangeRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeRequest" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdOnUtc">createdOnUtc.</param>
        /// <param name="reference">reference.</param>
        /// <param name="timeChange">timeChange.</param>
        public ChangeRequest(Guid? id = default(Guid?), DateTime? createdOnUtc = default(DateTime?), string reference = default(string), string timeChange = default(string))
        {
            this.Id = id;
            this.CreatedOnUtc = createdOnUtc;
            this.Reference = reference;
            this.TimeChange = timeChange;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedOnUtc
        /// </summary>
        [DataMember(Name="createdOnUtc", EmitDefaultValue=false)]
        public DateTime? CreatedOnUtc { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets TimeChange
        /// </summary>
        [DataMember(Name="timeChange", EmitDefaultValue=false)]
        public string TimeChange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangeRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedOnUtc: ").Append(CreatedOnUtc).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  TimeChange: ").Append(TimeChange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeRequest);
        }

        /// <summary>
        /// Returns true if ChangeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedOnUtc == input.CreatedOnUtc ||
                    (this.CreatedOnUtc != null &&
                    this.CreatedOnUtc.Equals(input.CreatedOnUtc))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.TimeChange == input.TimeChange ||
                    (this.TimeChange != null &&
                    this.TimeChange.Equals(input.TimeChange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedOnUtc != null)
                    hashCode = hashCode * 59 + this.CreatedOnUtc.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.TimeChange != null)
                    hashCode = hashCode * 59 + this.TimeChange.GetHashCode();
                return hashCode;
            }
        }
    }

}
