/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = LeapPlay.Api.Client.SwaggerDateConverter;

namespace LeapPlay.Api.Model
{
    /// <summary>
    /// Session
    /// </summary>
    [DataContract]
    public partial class Session :  IEquatable<Session>
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Requested for value: Requested
            /// </summary>
            [EnumMember(Value = "Requested")]
            Requested = 1,
            
            /// <summary>
            /// Enum Delivered for value: Delivered
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered = 2,
            
            /// <summary>
            /// Enum Started for value: Started
            /// </summary>
            [EnumMember(Value = "Started")]
            Started = 3,
            
            /// <summary>
            /// Enum Ended for value: Ended
            /// </summary>
            [EnumMember(Value = "Ended")]
            Ended = 4,
            
            /// <summary>
            /// Enum Canceled for value: Canceled
            /// </summary>
            [EnumMember(Value = "Canceled")]
            Canceled = 5,
            
            /// <summary>
            /// Enum DeliveryTimeout for value: DeliveryTimeout
            /// </summary>
            [EnumMember(Value = "DeliveryTimeout")]
            DeliveryTimeout = 6,
            
            /// <summary>
            /// Enum ResponseTimeout for value: ResponseTimeout
            /// </summary>
            [EnumMember(Value = "ResponseTimeout")]
            ResponseTimeout = 7
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="reference">reference.</param>
        /// <param name="state">state.</param>
        /// <param name="startedOnUtc">startedOnUtc.</param>
        /// <param name="startDuration">startDuration.</param>
        /// <param name="maxDurationLimit">maxDurationLimit.</param>
        public Session(Guid? sessionId = default(Guid?), string reference = default(string), StateEnum? state = default(StateEnum?), DateTime? startedOnUtc = default(DateTime?), string startDuration = default(string), string maxDurationLimit = default(string))
        {
            this.SessionId = sessionId;
            this.Reference = reference;
            this.State = state;
            this.StartedOnUtc = startedOnUtc;
            this.StartDuration = startDuration;
            this.MaxDurationLimit = maxDurationLimit;
        }
        
        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public Guid? SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }


        /// <summary>
        /// Gets or Sets StartedOnUtc
        /// </summary>
        [DataMember(Name="startedOnUtc", EmitDefaultValue=false)]
        public DateTime? StartedOnUtc { get; set; }

        /// <summary>
        /// Gets or Sets StartDuration
        /// </summary>
        [DataMember(Name="startDuration", EmitDefaultValue=false)]
        public string StartDuration { get; set; }

        /// <summary>
        /// Gets or Sets MaxDurationLimit
        /// </summary>
        [DataMember(Name="maxDurationLimit", EmitDefaultValue=false)]
        public string MaxDurationLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartedOnUtc: ").Append(StartedOnUtc).Append("\n");
            sb.Append("  StartDuration: ").Append(StartDuration).Append("\n");
            sb.Append("  MaxDurationLimit: ").Append(MaxDurationLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Session);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="input">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StartedOnUtc == input.StartedOnUtc ||
                    (this.StartedOnUtc != null &&
                    this.StartedOnUtc.Equals(input.StartedOnUtc))
                ) && 
                (
                    this.StartDuration == input.StartDuration ||
                    (this.StartDuration != null &&
                    this.StartDuration.Equals(input.StartDuration))
                ) && 
                (
                    this.MaxDurationLimit == input.MaxDurationLimit ||
                    (this.MaxDurationLimit != null &&
                    this.MaxDurationLimit.Equals(input.MaxDurationLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StartedOnUtc != null)
                    hashCode = hashCode * 59 + this.StartedOnUtc.GetHashCode();
                if (this.StartDuration != null)
                    hashCode = hashCode * 59 + this.StartDuration.GetHashCode();
                if (this.MaxDurationLimit != null)
                    hashCode = hashCode * 59 + this.MaxDurationLimit.GetHashCode();
                return hashCode;
            }
        }
    }

}
