/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LeapPlay.Api.Client;
using LeapPlay.Api.Model;

namespace LeapPlay.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>StationSettings</returns>
        StationSettings CreateStation (RequestCreateStation createStation = null);

        /// <summary>
        /// Creates a Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>ApiResponse of StationSettings</returns>
        ApiResponse<StationSettings> CreateStationWithHttpInfo (RequestCreateStation createStation = null);
        /// <summary>
        /// Gets closed Sessions from all stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ICollection&lt;SessionLog&gt;</returns>
        ICollection<SessionLog> GetSessionLogsAll (int? take = null, int? skip = null);

        /// <summary>
        /// Gets closed Sessions from all stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ICollection&lt;SessionLog&gt;</returns>
        ApiResponse<ICollection<SessionLog>> GetSessionLogsAllWithHttpInfo (int? take = null, int? skip = null);
        /// <summary>
        /// Gets closed Sessions (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ICollection&lt;SessionLog&gt;</returns>
        ICollection<SessionLog> GetSessionLogsByStationId (Guid? stationId, int? take = null, int? skip = null);

        /// <summary>
        /// Gets closed Sessions (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ICollection&lt;SessionLog&gt;</returns>
        ApiResponse<ICollection<SessionLog>> GetSessionLogsByStationIdWithHttpInfo (Guid? stationId, int? take = null, int? skip = null);
        /// <summary>
        /// Gets the Settings of all Stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;StationSettings&gt;</returns>
        ICollection<StationSettings> GetSettings ();

        /// <summary>
        /// Gets the Settings of all Stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;StationSettings&gt;</returns>
        ApiResponse<ICollection<StationSettings>> GetSettingsWithHttpInfo ();
        /// <summary>
        /// Get the Settings of an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StationSettings</returns>
        StationSettings GetSettingsByStationId (Guid? stationId);

        /// <summary>
        /// Get the Settings of an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StationSettings</returns>
        ApiResponse<StationSettings> GetSettingsByStationIdWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Get the Station&#39;s State (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StationCurrentState</returns>
        StationCurrentState GetState (Guid? stationId);

        /// <summary>
        /// Get the Station&#39;s State (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StationCurrentState</returns>
        ApiResponse<StationCurrentState> GetStateWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Gets Collection of Station States (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>ICollection&lt;StationCurrentState&gt;</returns>
        ICollection<StationCurrentState> GetStates (string networkStateFilter = null);

        /// <summary>
        /// Gets Collection of Station States (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;StationCurrentState&gt;</returns>
        ApiResponse<ICollection<StationCurrentState>> GetStatesWithHttpInfo (string networkStateFilter = null);
        /// <summary>
        /// Creates a Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>CreatedSession</returns>
        CreatedSession SessionCreate (Guid? stationId, RequestNewStationSession createSessionRequest = null);

        /// <summary>
        /// Creates a Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>ApiResponse of CreatedSession</returns>
        ApiResponse<CreatedSession> SessionCreateWithHttpInfo (Guid? stationId, RequestNewStationSession createSessionRequest = null);
        /// <summary>
        /// Stops the running Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StoppedSession</returns>
        StoppedSession SessionStop (Guid? stationId);

        /// <summary>
        /// Stops the running Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StoppedSession</returns>
        ApiResponse<StoppedSession> SessionStopWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Updates the running Session. (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>UpdatedSession</returns>
        UpdatedSession SessionUpdate (Guid? stationId, RequestSessionUpdate updateSessionRequest = null);

        /// <summary>
        /// Updates the running Session. (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>ApiResponse of UpdatedSession</returns>
        ApiResponse<UpdatedSession> SessionUpdateWithHttpInfo (Guid? stationId, RequestSessionUpdate updateSessionRequest = null);
        /// <summary>
        /// Sets the Settings for an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns></returns>
        void SetSettings (Guid? stationId, RequestStationSettings setSettingsRequest = null);

        /// <summary>
        /// Sets the Settings for an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetSettingsWithHttpInfo (Guid? stationId, RequestStationSettings setSettingsRequest = null);
        /// <summary>
        /// Sets the Operation Mode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns></returns>
        void SetStationMode (Guid? stationId, RequestStationMode setModeRequest = null);

        /// <summary>
        /// Sets the Operation Mode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetStationModeWithHttpInfo (Guid? stationId, RequestStationMode setModeRequest = null);
        /// <summary>
        /// Changes the Password (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns></returns>
        void SetStationPassword (Guid? stationId, RequestSetStationPassword setPasswordRequest = null);

        /// <summary>
        /// Changes the Password (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetStationPasswordWithHttpInfo (Guid? stationId, RequestSetStationPassword setPasswordRequest = null);
        /// <summary>
        /// Sets the QrCode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns></returns>
        void SetStationQrCode (Guid? stationId, RequestStationQrCode setQrCodeRequest = null);

        /// <summary>
        /// Sets the QrCode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetStationQrCodeWithHttpInfo (Guid? stationId, RequestStationQrCode setQrCodeRequest = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>Task of StationSettings</returns>
        System.Threading.Tasks.Task<StationSettings> CreateStationAsync (RequestCreateStation createStation = null);

        /// <summary>
        /// Creates a Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>Task of ApiResponse (StationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<StationSettings>> CreateStationAsyncWithHttpInfo (RequestCreateStation createStation = null);
        /// <summary>
        /// Gets closed Sessions from all stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ICollection&lt;SessionLog&gt;</returns>
        System.Threading.Tasks.Task<ICollection<SessionLog>> GetSessionLogsAllAsync (int? take = null, int? skip = null);

        /// <summary>
        /// Gets closed Sessions from all stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SessionLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<SessionLog>>> GetSessionLogsAllAsyncWithHttpInfo (int? take = null, int? skip = null);
        /// <summary>
        /// Gets closed Sessions (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ICollection&lt;SessionLog&gt;</returns>
        System.Threading.Tasks.Task<ICollection<SessionLog>> GetSessionLogsByStationIdAsync (Guid? stationId, int? take = null, int? skip = null);

        /// <summary>
        /// Gets closed Sessions (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SessionLog&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<SessionLog>>> GetSessionLogsByStationIdAsyncWithHttpInfo (Guid? stationId, int? take = null, int? skip = null);
        /// <summary>
        /// Gets the Settings of all Stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;StationSettings&gt;</returns>
        System.Threading.Tasks.Task<ICollection<StationSettings>> GetSettingsAsync ();

        /// <summary>
        /// Gets the Settings of all Stations (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;StationSettings&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<StationSettings>>> GetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the Settings of an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StationSettings</returns>
        System.Threading.Tasks.Task<StationSettings> GetSettingsByStationIdAsync (Guid? stationId);

        /// <summary>
        /// Get the Settings of an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StationSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<StationSettings>> GetSettingsByStationIdAsyncWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Get the Station&#39;s State (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StationCurrentState</returns>
        System.Threading.Tasks.Task<StationCurrentState> GetStateAsync (Guid? stationId);

        /// <summary>
        /// Get the Station&#39;s State (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StationCurrentState)</returns>
        System.Threading.Tasks.Task<ApiResponse<StationCurrentState>> GetStateAsyncWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Gets Collection of Station States (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>Task of ICollection&lt;StationCurrentState&gt;</returns>
        System.Threading.Tasks.Task<ICollection<StationCurrentState>> GetStatesAsync (string networkStateFilter = null);

        /// <summary>
        /// Gets Collection of Station States (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;StationCurrentState&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<ICollection<StationCurrentState>>> GetStatesAsyncWithHttpInfo (string networkStateFilter = null);
        /// <summary>
        /// Creates a Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>Task of CreatedSession</returns>
        System.Threading.Tasks.Task<CreatedSession> SessionCreateAsync (Guid? stationId, RequestNewStationSession createSessionRequest = null);

        /// <summary>
        /// Creates a Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>Task of ApiResponse (CreatedSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedSession>> SessionCreateAsyncWithHttpInfo (Guid? stationId, RequestNewStationSession createSessionRequest = null);
        /// <summary>
        /// Stops the running Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StoppedSession</returns>
        System.Threading.Tasks.Task<StoppedSession> SessionStopAsync (Guid? stationId);

        /// <summary>
        /// Stops the running Session (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StoppedSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoppedSession>> SessionStopAsyncWithHttpInfo (Guid? stationId);
        /// <summary>
        /// Updates the running Session. (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>Task of UpdatedSession</returns>
        System.Threading.Tasks.Task<UpdatedSession> SessionUpdateAsync (Guid? stationId, RequestSessionUpdate updateSessionRequest = null);

        /// <summary>
        /// Updates the running Session. (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatedSession>> SessionUpdateAsyncWithHttpInfo (Guid? stationId, RequestSessionUpdate updateSessionRequest = null);
        /// <summary>
        /// Sets the Settings for an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetSettingsAsync (Guid? stationId, RequestStationSettings setSettingsRequest = null);

        /// <summary>
        /// Sets the Settings for an Station (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetSettingsAsyncWithHttpInfo (Guid? stationId, RequestStationSettings setSettingsRequest = null);
        /// <summary>
        /// Sets the Operation Mode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetStationModeAsync (Guid? stationId, RequestStationMode setModeRequest = null);

        /// <summary>
        /// Sets the Operation Mode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetStationModeAsyncWithHttpInfo (Guid? stationId, RequestStationMode setModeRequest = null);
        /// <summary>
        /// Changes the Password (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetStationPasswordAsync (Guid? stationId, RequestSetStationPassword setPasswordRequest = null);

        /// <summary>
        /// Changes the Password (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetStationPasswordAsyncWithHttpInfo (Guid? stationId, RequestSetStationPassword setPasswordRequest = null);
        /// <summary>
        /// Sets the QrCode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetStationQrCodeAsync (Guid? stationId, RequestStationQrCode setQrCodeRequest = null);

        /// <summary>
        /// Sets the QrCode (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetStationQrCodeAsyncWithHttpInfo (Guid? stationId, RequestStationQrCode setQrCodeRequest = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StationsApi : IStationsApi
    {
        private LeapPlay.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StationsApi(String basePath)
        {
            this.Configuration = new LeapPlay.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LeapPlay.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StationsApi(LeapPlay.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LeapPlay.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LeapPlay.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LeapPlay.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LeapPlay.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>StationSettings</returns>
        public StationSettings CreateStation (RequestCreateStation createStation = null)
        {
             ApiResponse<StationSettings> localVarResponse = CreateStationWithHttpInfo(createStation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>ApiResponse of StationSettings</returns>
        public ApiResponse< StationSettings > CreateStationWithHttpInfo (RequestCreateStation createStation = null)
        {

            var localVarPath = "./api/v1/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createStation != null && createStation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createStation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createStation; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationSettings)));
        }

        /// <summary>
        /// Creates a Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>Task of StationSettings</returns>
        public async System.Threading.Tasks.Task<StationSettings> CreateStationAsync (RequestCreateStation createStation = null)
        {
             ApiResponse<StationSettings> localVarResponse = await CreateStationAsyncWithHttpInfo(createStation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStation">Create Station Dto (optional)</param>
        /// <returns>Task of ApiResponse (StationSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StationSettings>> CreateStationAsyncWithHttpInfo (RequestCreateStation createStation = null)
        {

            var localVarPath = "./api/v1/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createStation != null && createStation.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createStation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createStation; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationSettings)));
        }

        /// <summary>
        /// Gets closed Sessions from all stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ICollection&lt;SessionLog&gt;</returns>
        public ICollection<SessionLog> GetSessionLogsAll (int? take = null, int? skip = null)
        {
             ApiResponse<ICollection<SessionLog>> localVarResponse = GetSessionLogsAllWithHttpInfo(take, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets closed Sessions from all stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ICollection&lt;SessionLog&gt;</returns>
        public ApiResponse< ICollection<SessionLog> > GetSessionLogsAllWithHttpInfo (int? take = null, int? skip = null)
        {

            var localVarPath = "./api/v1/stations/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogsAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<SessionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<SessionLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionLog>)));
        }

        /// <summary>
        /// Gets closed Sessions from all stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ICollection&lt;SessionLog&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<SessionLog>> GetSessionLogsAllAsync (int? take = null, int? skip = null)
        {
             ApiResponse<ICollection<SessionLog>> localVarResponse = await GetSessionLogsAllAsyncWithHttpInfo(take, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets closed Sessions from all stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SessionLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<SessionLog>>> GetSessionLogsAllAsyncWithHttpInfo (int? take = null, int? skip = null)
        {

            var localVarPath = "./api/v1/stations/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogsAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<SessionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<SessionLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionLog>)));
        }

        /// <summary>
        /// Gets closed Sessions (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ICollection&lt;SessionLog&gt;</returns>
        public ICollection<SessionLog> GetSessionLogsByStationId (Guid? stationId, int? take = null, int? skip = null)
        {
             ApiResponse<ICollection<SessionLog>> localVarResponse = GetSessionLogsByStationIdWithHttpInfo(stationId, take, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets closed Sessions (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>ApiResponse of ICollection&lt;SessionLog&gt;</returns>
        public ApiResponse< ICollection<SessionLog> > GetSessionLogsByStationIdWithHttpInfo (Guid? stationId, int? take = null, int? skip = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetSessionLogsByStationId");

            var localVarPath = "./api/v1/stations/{stationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogsByStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<SessionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<SessionLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionLog>)));
        }

        /// <summary>
        /// Gets closed Sessions (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ICollection&lt;SessionLog&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<SessionLog>> GetSessionLogsByStationIdAsync (Guid? stationId, int? take = null, int? skip = null)
        {
             ApiResponse<ICollection<SessionLog>> localVarResponse = await GetSessionLogsByStationIdAsyncWithHttpInfo(stationId, take, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets closed Sessions (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="take">Entries to return (optional, default to 50)</param>
        /// <param name="skip">Entries to skip (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;SessionLog&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<SessionLog>>> GetSessionLogsByStationIdAsyncWithHttpInfo (Guid? stationId, int? take = null, int? skip = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetSessionLogsByStationId");

            var localVarPath = "./api/v1/stations/{stationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionLogsByStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<SessionLog>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<SessionLog>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SessionLog>)));
        }

        /// <summary>
        /// Gets the Settings of all Stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ICollection&lt;StationSettings&gt;</returns>
        public ICollection<StationSettings> GetSettings ()
        {
             ApiResponse<ICollection<StationSettings>> localVarResponse = GetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Settings of all Stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ICollection&lt;StationSettings&gt;</returns>
        public ApiResponse< ICollection<StationSettings> > GetSettingsWithHttpInfo ()
        {

            var localVarPath = "./api/v1/stations/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<StationSettings>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<StationSettings>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StationSettings>)));
        }

        /// <summary>
        /// Gets the Settings of all Stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ICollection&lt;StationSettings&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<StationSettings>> GetSettingsAsync ()
        {
             ApiResponse<ICollection<StationSettings>> localVarResponse = await GetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Settings of all Stations (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ICollection&lt;StationSettings&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<StationSettings>>> GetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/v1/stations/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<StationSettings>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<StationSettings>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StationSettings>)));
        }

        /// <summary>
        /// Get the Settings of an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StationSettings</returns>
        public StationSettings GetSettingsByStationId (Guid? stationId)
        {
             ApiResponse<StationSettings> localVarResponse = GetSettingsByStationIdWithHttpInfo(stationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Settings of an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StationSettings</returns>
        public ApiResponse< StationSettings > GetSettingsByStationIdWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetSettingsByStationId");

            var localVarPath = "./api/v1/stations/{stationId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsByStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationSettings)));
        }

        /// <summary>
        /// Get the Settings of an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StationSettings</returns>
        public async System.Threading.Tasks.Task<StationSettings> GetSettingsByStationIdAsync (Guid? stationId)
        {
             ApiResponse<StationSettings> localVarResponse = await GetSettingsByStationIdAsyncWithHttpInfo(stationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Settings of an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StationSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StationSettings>> GetSettingsByStationIdAsyncWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetSettingsByStationId");

            var localVarPath = "./api/v1/stations/{stationId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettingsByStationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationSettings)));
        }

        /// <summary>
        /// Get the Station&#39;s State (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StationCurrentState</returns>
        public StationCurrentState GetState (Guid? stationId)
        {
             ApiResponse<StationCurrentState> localVarResponse = GetStateWithHttpInfo(stationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Station&#39;s State (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StationCurrentState</returns>
        public ApiResponse< StationCurrentState > GetStateWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetState");

            var localVarPath = "./api/v1/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationCurrentState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationCurrentState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationCurrentState)));
        }

        /// <summary>
        /// Get the Station&#39;s State (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StationCurrentState</returns>
        public async System.Threading.Tasks.Task<StationCurrentState> GetStateAsync (Guid? stationId)
        {
             ApiResponse<StationCurrentState> localVarResponse = await GetStateAsyncWithHttpInfo(stationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the Station&#39;s State (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StationCurrentState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StationCurrentState>> GetStateAsyncWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->GetState");

            var localVarPath = "./api/v1/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StationCurrentState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StationCurrentState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StationCurrentState)));
        }

        /// <summary>
        /// Gets Collection of Station States (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>ICollection&lt;StationCurrentState&gt;</returns>
        public ICollection<StationCurrentState> GetStates (string networkStateFilter = null)
        {
             ApiResponse<ICollection<StationCurrentState>> localVarResponse = GetStatesWithHttpInfo(networkStateFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Collection of Station States (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>ApiResponse of ICollection&lt;StationCurrentState&gt;</returns>
        public ApiResponse< ICollection<StationCurrentState> > GetStatesWithHttpInfo (string networkStateFilter = null)
        {

            var localVarPath = "./api/v1/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (networkStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkStateFilter", networkStateFilter)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<StationCurrentState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<StationCurrentState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StationCurrentState>)));
        }

        /// <summary>
        /// Gets Collection of Station States (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>Task of ICollection&lt;StationCurrentState&gt;</returns>
        public async System.Threading.Tasks.Task<ICollection<StationCurrentState>> GetStatesAsync (string networkStateFilter = null)
        {
             ApiResponse<ICollection<StationCurrentState>> localVarResponse = await GetStatesAsyncWithHttpInfo(networkStateFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Collection of Station States (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="networkStateFilter">Optional Network State Filter (optional)</param>
        /// <returns>Task of ApiResponse (ICollection&lt;StationCurrentState&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ICollection<StationCurrentState>>> GetStatesAsyncWithHttpInfo (string networkStateFilter = null)
        {

            var localVarPath = "./api/v1/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (networkStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "networkStateFilter", networkStateFilter)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ICollection<StationCurrentState>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ICollection<StationCurrentState>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<StationCurrentState>)));
        }

        /// <summary>
        /// Creates a Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>CreatedSession</returns>
        public CreatedSession SessionCreate (Guid? stationId, RequestNewStationSession createSessionRequest = null)
        {
             ApiResponse<CreatedSession> localVarResponse = SessionCreateWithHttpInfo(stationId, createSessionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>ApiResponse of CreatedSession</returns>
        public ApiResponse< CreatedSession > SessionCreateWithHttpInfo (Guid? stationId, RequestNewStationSession createSessionRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionCreate");

            var localVarPath = "./api/v1/stations/{stationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (createSessionRequest != null && createSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedSession)));
        }

        /// <summary>
        /// Creates a Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>Task of CreatedSession</returns>
        public async System.Threading.Tasks.Task<CreatedSession> SessionCreateAsync (Guid? stationId, RequestNewStationSession createSessionRequest = null)
        {
             ApiResponse<CreatedSession> localVarResponse = await SessionCreateAsyncWithHttpInfo(stationId, createSessionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="createSessionRequest">New Session Request Dto (optional)</param>
        /// <returns>Task of ApiResponse (CreatedSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedSession>> SessionCreateAsyncWithHttpInfo (Guid? stationId, RequestNewStationSession createSessionRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionCreate");

            var localVarPath = "./api/v1/stations/{stationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (createSessionRequest != null && createSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSessionRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreatedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedSession)));
        }

        /// <summary>
        /// Stops the running Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>StoppedSession</returns>
        public StoppedSession SessionStop (Guid? stationId)
        {
             ApiResponse<StoppedSession> localVarResponse = SessionStopWithHttpInfo(stationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stops the running Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>ApiResponse of StoppedSession</returns>
        public ApiResponse< StoppedSession > SessionStopWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionStop");

            var localVarPath = "./api/v1/stations/{stationId}/sessions/current/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoppedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StoppedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoppedSession)));
        }

        /// <summary>
        /// Stops the running Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of StoppedSession</returns>
        public async System.Threading.Tasks.Task<StoppedSession> SessionStopAsync (Guid? stationId)
        {
             ApiResponse<StoppedSession> localVarResponse = await SessionStopAsyncWithHttpInfo(stationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stops the running Session (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <returns>Task of ApiResponse (StoppedSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StoppedSession>> SessionStopAsyncWithHttpInfo (Guid? stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionStop");

            var localVarPath = "./api/v1/stations/{stationId}/sessions/current/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionStop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StoppedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StoppedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StoppedSession)));
        }

        /// <summary>
        /// Updates the running Session. (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>UpdatedSession</returns>
        public UpdatedSession SessionUpdate (Guid? stationId, RequestSessionUpdate updateSessionRequest = null)
        {
             ApiResponse<UpdatedSession> localVarResponse = SessionUpdateWithHttpInfo(stationId, updateSessionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the running Session. (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>ApiResponse of UpdatedSession</returns>
        public ApiResponse< UpdatedSession > SessionUpdateWithHttpInfo (Guid? stationId, RequestSessionUpdate updateSessionRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionUpdate");

            var localVarPath = "./api/v1/stations/{stationId}/sessions/current/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (updateSessionRequest != null && updateSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSessionRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdatedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedSession)));
        }

        /// <summary>
        /// Updates the running Session. (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>Task of UpdatedSession</returns>
        public async System.Threading.Tasks.Task<UpdatedSession> SessionUpdateAsync (Guid? stationId, RequestSessionUpdate updateSessionRequest = null)
        {
             ApiResponse<UpdatedSession> localVarResponse = await SessionUpdateAsyncWithHttpInfo(stationId, updateSessionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the running Session. (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="updateSessionRequest">The Update Request Dto (optional)</param>
        /// <returns>Task of ApiResponse (UpdatedSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatedSession>> SessionUpdateAsyncWithHttpInfo (Guid? stationId, RequestSessionUpdate updateSessionRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SessionUpdate");

            var localVarPath = "./api/v1/stations/{stationId}/sessions/current/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (updateSessionRequest != null && updateSessionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSessionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSessionRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SessionUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatedSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (UpdatedSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatedSession)));
        }

        /// <summary>
        /// Sets the Settings for an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns></returns>
        public void SetSettings (Guid? stationId, RequestStationSettings setSettingsRequest = null)
        {
             SetSettingsWithHttpInfo(stationId, setSettingsRequest);
        }

        /// <summary>
        /// Sets the Settings for an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetSettingsWithHttpInfo (Guid? stationId, RequestStationSettings setSettingsRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetSettings");

            var localVarPath = "./api/v1/stations/{stationId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setSettingsRequest != null && setSettingsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setSettingsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setSettingsRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the Settings for an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetSettingsAsync (Guid? stationId, RequestStationSettings setSettingsRequest = null)
        {
             await SetSettingsAsyncWithHttpInfo(stationId, setSettingsRequest);

        }

        /// <summary>
        /// Sets the Settings for an Station (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setSettingsRequest">Settings Dto (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetSettingsAsyncWithHttpInfo (Guid? stationId, RequestStationSettings setSettingsRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetSettings");

            var localVarPath = "./api/v1/stations/{stationId}/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setSettingsRequest != null && setSettingsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setSettingsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setSettingsRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the Operation Mode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns></returns>
        public void SetStationMode (Guid? stationId, RequestStationMode setModeRequest = null)
        {
             SetStationModeWithHttpInfo(stationId, setModeRequest);
        }

        /// <summary>
        /// Sets the Operation Mode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetStationModeWithHttpInfo (Guid? stationId, RequestStationMode setModeRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationMode");

            var localVarPath = "./api/v1/stations/{stationId}/settings/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setModeRequest != null && setModeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setModeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setModeRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the Operation Mode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetStationModeAsync (Guid? stationId, RequestStationMode setModeRequest = null)
        {
             await SetStationModeAsyncWithHttpInfo(stationId, setModeRequest);

        }

        /// <summary>
        /// Sets the Operation Mode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setModeRequest">The Operation Mode (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetStationModeAsyncWithHttpInfo (Guid? stationId, RequestStationMode setModeRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationMode");

            var localVarPath = "./api/v1/stations/{stationId}/settings/mode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setModeRequest != null && setModeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setModeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setModeRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationMode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Changes the Password (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns></returns>
        public void SetStationPassword (Guid? stationId, RequestSetStationPassword setPasswordRequest = null)
        {
             SetStationPasswordWithHttpInfo(stationId, setPasswordRequest);
        }

        /// <summary>
        /// Changes the Password (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetStationPasswordWithHttpInfo (Guid? stationId, RequestSetStationPassword setPasswordRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationPassword");

            var localVarPath = "./api/v1/stations/{stationId}/settings/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setPasswordRequest != null && setPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setPasswordRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Changes the Password (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetStationPasswordAsync (Guid? stationId, RequestSetStationPassword setPasswordRequest = null)
        {
             await SetStationPasswordAsyncWithHttpInfo(stationId, setPasswordRequest);

        }

        /// <summary>
        /// Changes the Password (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setPasswordRequest">New Password (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetStationPasswordAsyncWithHttpInfo (Guid? stationId, RequestSetStationPassword setPasswordRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationPassword");

            var localVarPath = "./api/v1/stations/{stationId}/settings/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setPasswordRequest != null && setPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setPasswordRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the QrCode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns></returns>
        public void SetStationQrCode (Guid? stationId, RequestStationQrCode setQrCodeRequest = null)
        {
             SetStationQrCodeWithHttpInfo(stationId, setQrCodeRequest);
        }

        /// <summary>
        /// Sets the QrCode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetStationQrCodeWithHttpInfo (Guid? stationId, RequestStationQrCode setQrCodeRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationQrCode");

            var localVarPath = "./api/v1/stations/{stationId}/settings/qrcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setQrCodeRequest != null && setQrCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setQrCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setQrCodeRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationQrCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sets the QrCode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetStationQrCodeAsync (Guid? stationId, RequestStationQrCode setQrCodeRequest = null)
        {
             await SetStationQrCodeAsyncWithHttpInfo(stationId, setQrCodeRequest);

        }

        /// <summary>
        /// Sets the QrCode (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId">Station Id</param>
        /// <param name="setQrCodeRequest">QrCode (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetStationQrCodeAsyncWithHttpInfo (Guid? stationId, RequestStationQrCode setQrCodeRequest = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling StationsApi->SetStationQrCode");

            var localVarPath = "./api/v1/stations/{stationId}/settings/qrcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (setQrCodeRequest != null && setQrCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setQrCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setQrCodeRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetStationQrCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
