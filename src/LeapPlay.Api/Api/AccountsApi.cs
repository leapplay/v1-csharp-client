/* 
 * Leap Play
 *
 * Learn more at https://www.leap-play.com
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using LeapPlay.Api.Client;
using LeapPlay.Api.Model;

namespace LeapPlay.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>ChangedPasswordUser</returns>
        ChangedPasswordUser ChangePassword (RequestChangePassword changePasswordRequest);

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>ApiResponse of ChangedPasswordUser</returns>
        ApiResponse<ChangedPasswordUser> ChangePasswordWithHttpInfo (RequestChangePassword changePasswordRequest);
        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns></returns>
        void ConfirmEmail (RequestEmailConfirmation emailConfirmationRequest);

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ConfirmEmailWithHttpInfo (RequestEmailConfirmation emailConfirmationRequest);
        /// <summary>
        /// Registers a User Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns></returns>
        void Register (RequestRegisterUser registerRequest);

        /// <summary>
        /// Registers a User Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterWithHttpInfo (RequestRegisterUser registerRequest);
        /// <summary>
        /// Receives a Reset Token that is required to reset the Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns></returns>
        void RequestPassword (RequestForgotPassword forgotPasswordRequest);

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RequestPasswordWithHttpInfo (RequestForgotPassword forgotPasswordRequest);
        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns></returns>
        void ResendEMailConfirmation (RequestResendConfirmationEmail resendConfirmationEmailRequest);

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResendEMailConfirmationWithHttpInfo (RequestResendConfirmationEmail resendConfirmationEmailRequest);
        /// <summary>
        /// Resets the Password with an Reset Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns></returns>
        void ResetPassword (RequestResetPassword resetPasswordRequest);

        /// <summary>
        /// Resets the Password with an Reset Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetPasswordWithHttpInfo (RequestResetPassword resetPasswordRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>Task of ChangedPasswordUser</returns>
        System.Threading.Tasks.Task<ChangedPasswordUser> ChangePasswordAsync (RequestChangePassword changePasswordRequest);

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>Task of ApiResponse (ChangedPasswordUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangedPasswordUser>> ChangePasswordAsyncWithHttpInfo (RequestChangePassword changePasswordRequest);
        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ConfirmEmailAsync (RequestEmailConfirmation emailConfirmationRequest);

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConfirmEmailAsyncWithHttpInfo (RequestEmailConfirmation emailConfirmationRequest);
        /// <summary>
        /// Registers a User Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterAsync (RequestRegisterUser registerRequest);

        /// <summary>
        /// Registers a User Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsyncWithHttpInfo (RequestRegisterUser registerRequest);
        /// <summary>
        /// Receives a Reset Token that is required to reset the Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RequestPasswordAsync (RequestForgotPassword forgotPasswordRequest);

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RequestPasswordAsyncWithHttpInfo (RequestForgotPassword forgotPasswordRequest);
        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResendEMailConfirmationAsync (RequestResendConfirmationEmail resendConfirmationEmailRequest);

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResendEMailConfirmationAsyncWithHttpInfo (RequestResendConfirmationEmail resendConfirmationEmailRequest);
        /// <summary>
        /// Resets the Password with an Reset Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetPasswordAsync (RequestResetPassword resetPasswordRequest);

        /// <summary>
        /// Resets the Password with an Reset Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordAsyncWithHttpInfo (RequestResetPassword resetPasswordRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private LeapPlay.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(String basePath)
        {
            this.Configuration = new LeapPlay.Api.Client.Configuration { BasePath = basePath };

            ExceptionFactory = LeapPlay.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(LeapPlay.Api.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = LeapPlay.Api.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = LeapPlay.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LeapPlay.Api.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LeapPlay.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>ChangedPasswordUser</returns>
        public ChangedPasswordUser ChangePassword (RequestChangePassword changePasswordRequest)
        {
             ApiResponse<ChangedPasswordUser> localVarResponse = ChangePasswordWithHttpInfo(changePasswordRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>ApiResponse of ChangedPasswordUser</returns>
        public ApiResponse< ChangedPasswordUser > ChangePasswordWithHttpInfo (RequestChangePassword changePasswordRequest)
        {
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordRequest' when calling AccountsApi->ChangePassword");

            var localVarPath = "./api/v1/accounts/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changePasswordRequest != null && changePasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changePasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangedPasswordUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangedPasswordUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangedPasswordUser)));
        }

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>Task of ChangedPasswordUser</returns>
        public async System.Threading.Tasks.Task<ChangedPasswordUser> ChangePasswordAsync (RequestChangePassword changePasswordRequest)
        {
             ApiResponse<ChangedPasswordUser> localVarResponse = await ChangePasswordAsyncWithHttpInfo(changePasswordRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Changes the Password and provides a new Refresh Token (Auth) 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequest">The change password request.</param>
        /// <returns>Task of ApiResponse (ChangedPasswordUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChangedPasswordUser>> ChangePasswordAsyncWithHttpInfo (RequestChangePassword changePasswordRequest)
        {
            // verify the required parameter 'changePasswordRequest' is set
            if (changePasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'changePasswordRequest' when calling AccountsApi->ChangePassword");

            var localVarPath = "./api/v1/accounts/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (changePasswordRequest != null && changePasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changePasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changePasswordRequest; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChangedPasswordUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ChangedPasswordUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChangedPasswordUser)));
        }

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns></returns>
        public void ConfirmEmail (RequestEmailConfirmation emailConfirmationRequest)
        {
             ConfirmEmailWithHttpInfo(emailConfirmationRequest);
        }

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ConfirmEmailWithHttpInfo (RequestEmailConfirmation emailConfirmationRequest)
        {
            // verify the required parameter 'emailConfirmationRequest' is set
            if (emailConfirmationRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailConfirmationRequest' when calling AccountsApi->ConfirmEmail");

            var localVarPath = "./api/v1/accounts/email/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailConfirmationRequest != null && emailConfirmationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailConfirmationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailConfirmationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ConfirmEmailAsync (RequestEmailConfirmation emailConfirmationRequest)
        {
             await ConfirmEmailAsyncWithHttpInfo(emailConfirmationRequest);

        }

        /// <summary>
        /// Confirms ownership of an E-Mail Address by an E-Mail Confirmation Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="emailConfirmationRequest">The request email confirmation.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConfirmEmailAsyncWithHttpInfo (RequestEmailConfirmation emailConfirmationRequest)
        {
            // verify the required parameter 'emailConfirmationRequest' is set
            if (emailConfirmationRequest == null)
                throw new ApiException(400, "Missing required parameter 'emailConfirmationRequest' when calling AccountsApi->ConfirmEmail");

            var localVarPath = "./api/v1/accounts/email/confirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emailConfirmationRequest != null && emailConfirmationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(emailConfirmationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailConfirmationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfirmEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Registers a User Account 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns></returns>
        public void Register (RequestRegisterUser registerRequest)
        {
             RegisterWithHttpInfo(registerRequest);
        }

        /// <summary>
        /// Registers a User Account 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterWithHttpInfo (RequestRegisterUser registerRequest)
        {
            // verify the required parameter 'registerRequest' is set
            if (registerRequest == null)
                throw new ApiException(400, "Missing required parameter 'registerRequest' when calling AccountsApi->Register");

            var localVarPath = "./api/v1/accounts/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registerRequest != null && registerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Registers a User Account 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterAsync (RequestRegisterUser registerRequest)
        {
             await RegisterAsyncWithHttpInfo(registerRequest);

        }

        /// <summary>
        /// Registers a User Account 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsyncWithHttpInfo (RequestRegisterUser registerRequest)
        {
            // verify the required parameter 'registerRequest' is set
            if (registerRequest == null)
                throw new ApiException(400, "Missing required parameter 'registerRequest' when calling AccountsApi->Register");

            var localVarPath = "./api/v1/accounts/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registerRequest != null && registerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Register", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns></returns>
        public void RequestPassword (RequestForgotPassword forgotPasswordRequest)
        {
             RequestPasswordWithHttpInfo(forgotPasswordRequest);
        }

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RequestPasswordWithHttpInfo (RequestForgotPassword forgotPasswordRequest)
        {
            // verify the required parameter 'forgotPasswordRequest' is set
            if (forgotPasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'forgotPasswordRequest' when calling AccountsApi->RequestPassword");

            var localVarPath = "./api/v1/accounts/password/forgot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forgotPasswordRequest != null && forgotPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forgotPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forgotPasswordRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RequestPasswordAsync (RequestForgotPassword forgotPasswordRequest)
        {
             await RequestPasswordAsyncWithHttpInfo(forgotPasswordRequest);

        }

        /// <summary>
        /// Receives a Reset Token that is required to reset the Password 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPasswordRequest">Request object holding the required parameter</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RequestPasswordAsyncWithHttpInfo (RequestForgotPassword forgotPasswordRequest)
        {
            // verify the required parameter 'forgotPasswordRequest' is set
            if (forgotPasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'forgotPasswordRequest' when calling AccountsApi->RequestPassword");

            var localVarPath = "./api/v1/accounts/password/forgot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forgotPasswordRequest != null && forgotPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(forgotPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forgotPasswordRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token. 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns></returns>
        public void ResendEMailConfirmation (RequestResendConfirmationEmail resendConfirmationEmailRequest)
        {
             ResendEMailConfirmationWithHttpInfo(resendConfirmationEmailRequest);
        }

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token. 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResendEMailConfirmationWithHttpInfo (RequestResendConfirmationEmail resendConfirmationEmailRequest)
        {
            // verify the required parameter 'resendConfirmationEmailRequest' is set
            if (resendConfirmationEmailRequest == null)
                throw new ApiException(400, "Missing required parameter 'resendConfirmationEmailRequest' when calling AccountsApi->ResendEMailConfirmation");

            var localVarPath = "./api/v1/accounts/email/confirmation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resendConfirmationEmailRequest != null && resendConfirmationEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resendConfirmationEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resendConfirmationEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendEMailConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token. 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResendEMailConfirmationAsync (RequestResendConfirmationEmail resendConfirmationEmailRequest)
        {
             await ResendEMailConfirmationAsyncWithHttpInfo(resendConfirmationEmailRequest);

        }

        /// <summary>
        /// Re-sends a message with a EMail Confirmation Token. 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resendConfirmationEmailRequest">The resend email confirmation request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResendEMailConfirmationAsyncWithHttpInfo (RequestResendConfirmationEmail resendConfirmationEmailRequest)
        {
            // verify the required parameter 'resendConfirmationEmailRequest' is set
            if (resendConfirmationEmailRequest == null)
                throw new ApiException(400, "Missing required parameter 'resendConfirmationEmailRequest' when calling AccountsApi->ResendEMailConfirmation");

            var localVarPath = "./api/v1/accounts/email/confirmation/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resendConfirmationEmailRequest != null && resendConfirmationEmailRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resendConfirmationEmailRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resendConfirmationEmailRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendEMailConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Resets the Password with an Reset Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns></returns>
        public void ResetPassword (RequestResetPassword resetPasswordRequest)
        {
             ResetPasswordWithHttpInfo(resetPasswordRequest);
        }

        /// <summary>
        /// Resets the Password with an Reset Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ResetPasswordWithHttpInfo (RequestResetPassword resetPasswordRequest)
        {
            // verify the required parameter 'resetPasswordRequest' is set
            if (resetPasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'resetPasswordRequest' when calling AccountsApi->ResetPassword");

            var localVarPath = "./api/v1/accounts/password/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resetPasswordRequest != null && resetPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resetPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resetPasswordRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Resets the Password with an Reset Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetPasswordAsync (RequestResetPassword resetPasswordRequest)
        {
             await ResetPasswordAsyncWithHttpInfo(resetPasswordRequest);

        }

        /// <summary>
        /// Resets the Password with an Reset Token 
        /// </summary>
        /// <exception cref="LeapPlay.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPasswordRequest">The request reset password.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResetPasswordAsyncWithHttpInfo (RequestResetPassword resetPasswordRequest)
        {
            // verify the required parameter 'resetPasswordRequest' is set
            if (resetPasswordRequest == null)
                throw new ApiException(400, "Missing required parameter 'resetPasswordRequest' when calling AccountsApi->ResetPassword");

            var localVarPath = "./api/v1/accounts/password/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resetPasswordRequest != null && resetPasswordRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resetPasswordRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resetPasswordRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
